// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/book_categories/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/book_categories/usecase/usecase.go -destination=app/mocks/book_categories/usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/1rhino/clean_architecture/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIBookCategoryUsecase is a mock of IBookCategoryUsecase interface.
type MockIBookCategoryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIBookCategoryUsecaseMockRecorder
}

// MockIBookCategoryUsecaseMockRecorder is the mock recorder for MockIBookCategoryUsecase.
type MockIBookCategoryUsecaseMockRecorder struct {
	mock *MockIBookCategoryUsecase
}

// NewMockIBookCategoryUsecase creates a new mock instance.
func NewMockIBookCategoryUsecase(ctrl *gomock.Controller) *MockIBookCategoryUsecase {
	mock := &MockIBookCategoryUsecase{ctrl: ctrl}
	mock.recorder = &MockIBookCategoryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookCategoryUsecase) EXPECT() *MockIBookCategoryUsecaseMockRecorder {
	return m.recorder
}

// CreateBookCategory mocks base method.
func (m *MockIBookCategoryUsecase) CreateBookCategory(arg0 *models.BookCategoryParams) (*models.BookCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookCategory", arg0)
	ret0, _ := ret[0].(*models.BookCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookCategory indicates an expected call of CreateBookCategory.
func (mr *MockIBookCategoryUsecaseMockRecorder) CreateBookCategory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookCategory", reflect.TypeOf((*MockIBookCategoryUsecase)(nil).CreateBookCategory), arg0)
}

// DeleteBookCategory mocks base method.
func (m *MockIBookCategoryUsecase) DeleteBookCategory(bookCategoryID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookCategory", bookCategoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookCategory indicates an expected call of DeleteBookCategory.
func (mr *MockIBookCategoryUsecaseMockRecorder) DeleteBookCategory(bookCategoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookCategory", reflect.TypeOf((*MockIBookCategoryUsecase)(nil).DeleteBookCategory), bookCategoryID)
}

// GetBookCategories mocks base method.
func (m *MockIBookCategoryUsecase) GetBookCategories() ([]*models.BookCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookCategories")
	ret0, _ := ret[0].([]*models.BookCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookCategories indicates an expected call of GetBookCategories.
func (mr *MockIBookCategoryUsecaseMockRecorder) GetBookCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCategories", reflect.TypeOf((*MockIBookCategoryUsecase)(nil).GetBookCategories))
}

// GetBookCategory mocks base method.
func (m *MockIBookCategoryUsecase) GetBookCategory(id string) (*models.BookCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookCategory", id)
	ret0, _ := ret[0].(*models.BookCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookCategory indicates an expected call of GetBookCategory.
func (mr *MockIBookCategoryUsecaseMockRecorder) GetBookCategory(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookCategory", reflect.TypeOf((*MockIBookCategoryUsecase)(nil).GetBookCategory), id)
}

// UpdateBookCategory mocks base method.
func (m *MockIBookCategoryUsecase) UpdateBookCategory(id string, params *models.BookCategoryParams) (*models.BookCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookCategory", id, params)
	ret0, _ := ret[0].(*models.BookCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookCategory indicates an expected call of UpdateBookCategory.
func (mr *MockIBookCategoryUsecaseMockRecorder) UpdateBookCategory(id, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookCategory", reflect.TypeOf((*MockIBookCategoryUsecase)(nil).UpdateBookCategory), id, params)
}
