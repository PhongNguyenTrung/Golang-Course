// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/books/repositories/repository.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/books/repositories/repository.go -destination=app/mocks/books/repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/1rhino/clean_architecture/app/models"
	gin "github.com/gin-gonic/gin"
	pagination "github.com/rosberry/go-pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockIBookRepo is a mock of IBookRepo interface.
type MockIBookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepoMockRecorder
}

// MockIBookRepoMockRecorder is the mock recorder for MockIBookRepo.
type MockIBookRepoMockRecorder struct {
	mock *MockIBookRepo
}

// NewMockIBookRepo creates a new mock instance.
func NewMockIBookRepo(ctrl *gomock.Controller) *MockIBookRepo {
	mock := &MockIBookRepo{ctrl: ctrl}
	mock.recorder = &MockIBookRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepo) EXPECT() *MockIBookRepoMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBookRepo) CreateBook(user *models.User, payload models.BookParams) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", user, payload)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookRepoMockRecorder) CreateBook(user, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBookRepo)(nil).CreateBook), user, payload)
}

// DeleteBook mocks base method.
func (m *MockIBookRepo) DeleteBook(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIBookRepoMockRecorder) DeleteBook(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIBookRepo)(nil).DeleteBook), id)
}

// GetBook mocks base method.
func (m *MockIBookRepo) GetBook(user *models.User, id string) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", user, id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockIBookRepoMockRecorder) GetBook(user, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockIBookRepo)(nil).GetBook), user, id)
}

// GetBooks mocks base method.
func (m *MockIBookRepo) GetBooks(c *gin.Context, user *models.User, query models.BookQueryParams) ([]*models.Book, *pagination.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", c, user, query)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(*pagination.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockIBookRepoMockRecorder) GetBooks(c, user, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockIBookRepo)(nil).GetBooks), c, user, query)
}

// UpdateBook mocks base method.
func (m *MockIBookRepo) UpdateBook(user *models.User, id string, payload models.BookParams) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", user, id, payload)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIBookRepoMockRecorder) UpdateBook(user, id, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIBookRepo)(nil).UpdateBook), user, id, payload)
}
