// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/books/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/books/usecase/usecase.go -destination=app/mocks/books/usecase.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/1rhino/clean_architecture/app/models"
	gin "github.com/gin-gonic/gin"
	pagination "github.com/rosberry/go-pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockIBookUsecase is a mock of IBookUsecase interface.
type MockIBookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIBookUsecaseMockRecorder
}

// MockIBookUsecaseMockRecorder is the mock recorder for MockIBookUsecase.
type MockIBookUsecaseMockRecorder struct {
	mock *MockIBookUsecase
}

// NewMockIBookUsecase creates a new mock instance.
func NewMockIBookUsecase(ctrl *gomock.Controller) *MockIBookUsecase {
	mock := &MockIBookUsecase{ctrl: ctrl}
	mock.recorder = &MockIBookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookUsecase) EXPECT() *MockIBookUsecaseMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBookUsecase) CreateBook(c *gin.Context, payload models.BookParams) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", c, payload)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookUsecaseMockRecorder) CreateBook(c, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBookUsecase)(nil).CreateBook), c, payload)
}

// DeleteBook mocks base method.
func (m *MockIBookUsecase) DeleteBook(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIBookUsecaseMockRecorder) DeleteBook(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIBookUsecase)(nil).DeleteBook), id)
}

// GetBook mocks base method.
func (m *MockIBookUsecase) GetBook(c *gin.Context) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", c)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockIBookUsecaseMockRecorder) GetBook(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockIBookUsecase)(nil).GetBook), c)
}

// GetBooks mocks base method.
func (m *MockIBookUsecase) GetBooks(c *gin.Context) ([]*models.Book, *pagination.Paginator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", c)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(*pagination.Paginator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockIBookUsecaseMockRecorder) GetBooks(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockIBookUsecase)(nil).GetBooks), c)
}

// UpdateBook mocks base method.
func (m *MockIBookUsecase) UpdateBook(c *gin.Context, payload models.BookParams) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", c, payload)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockIBookUsecaseMockRecorder) UpdateBook(c, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockIBookUsecase)(nil).UpdateBook), c, payload)
}
